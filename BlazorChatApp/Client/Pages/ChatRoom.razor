@page "/chatroom"
@using Blazor.Extensions; 
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using BlazorChatApp.Client.Core

@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatApp.Shared;
@using BlazorChatApp.Client.Model;
@using Microsoft.JSInterop
@using ServiceModel.Models.Search
@inject HttpClient Http

@implements IAsyncDisposable
@inject IJSRuntime JsRuntime;

<p>MyName: @Name , RoomName : @RoomName , 채팅창에 방향키누르면 움직입니다. </p>

<input type="text" @onkeydown="KeyboardEventHandler" @onkeypress="KeyboardEventHandler" @onkeyup="KeyboardChatEventHandler"  @bind="ChatMessageText" />
<h6>@KeyPressed </h6>
<h6>@EventInfo</h6>



<div id="canvasContainer" style="position: fixed; width: 100%; height: 100%" >
    <img @ref="_spritesheet" hidden id="spritesheet" src="/img/map1.png" />
    <img @ref="_img_char1" hidden id="spritesheet" src="/img/char-1.png" />
    <BECanvas Width=1024 Height=800  @ref="_canvas"></BECanvas>
</div>

@code {
    //Game
    private string Name{ get; set; }
    private string RoomName{ get; set; }
    public HubConnection hubConnection { get; set; }
    private Field BallField = new Field();
    BECanvasComponent _canvas;
    ElementReference _spritesheet;
    ElementReference _img_char1;    

    Canvas2DContext _context;
    private string LoginId { get; set; }
    private DateTime LastRender;

    private ChatLand _chatLand;
    //Product
    string TextValue { get; set; }    
    private SearchResult searchResult;
    //Filter Values
    string SearchText {  get;  set; }
    string mallId;
    string categoryId;
    string categoryId2;    
    string filterText;
    string orderText;
    
    bool mandatory = true;
    
    DateTime lastPopupTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {

        LoginId = Guid.NewGuid().ToString();    //Fake Login ID

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<RoomInfo, UserInfo, UpdateUserPos>("OnJoinRoom", (room, user, pos) =>
        {
            Console.WriteLine($"WS - OnJoinRoom");
            if(user.Id == LoginId)
            {
                Name = user.Name;
                RoomName = room.Name;                
                StateHasChanged();
            }
            else
            {
                BallField.AddUser(user.Id,user.Name, pos.AbsPosX, pos.AbsPosY);
            }
        });

        hubConnection.On<UserInfo,List<UpdateUserPos>>("OnSyncRoom", (user, updateUserPos) =>
        {
            Console.WriteLine($"WS - OnSyncRoom");
            if(user.Id == LoginId)
            {
                foreach(var pos in updateUserPos)
                {
                    BallField.AddUser(pos.Id, pos.Name, pos.AbsPosX, pos.AbsPosY);                        
                }
            }
        });

        //ChatMessage
        hubConnection.On<ChatMessage>("OnChatMessage", (chatMessage) =>
        {
            Console.WriteLine($"WS - OnChatMessage");
            BallField.ChatMessage(chatMessage);
        });


        hubConnection.On<UpdateUserPos>("OnUpdateUserPos", (userPos) =>
        {
            Console.WriteLine($"WS - OnUpdateUserPos");
            //ME
            if(userPos.Id == LoginId)
            {
                var linkinfo = BallField.CollisionCheck(userPos.AbsPosX, userPos.AbsPosY);
                if (linkinfo != null)
                {
                    TimeSpan offset = DateTime.Now - lastPopupTime;
                    if(offset.TotalSeconds > 5)
                    {                        
                        //OpenDrawer(Anchor.Right);
                        lastPopupTime = DateTime.Now;
                        StateHasChanged();
                    }
                }
                else
                {
                    if(open) open = false;
                }
            }
            BallField.UpdateUserPos(userPos);
        });

        hubConnection.On<LeaveRoom>("OnLeaveRoom", (room) =>
        {
            Console.WriteLine($"WS - OnLeaveRoom");
            BallField.RemoveUser(room.UserInfo.Id);
        });

        await hubConnection.StartAsync();

        JoinRoom sendMsg = new JoinRoom()
        {
            UserInfo = new UserInfo(){Name="user", Id= LoginId},
            RoomInfo = new RoomInfo(){Name="room1"}
        };

        SyncRoom syndMsg = new SyncRoom()
        {
            UserInfo = new UserInfo(){Name="user", Id= LoginId},
            RoomInfo = new RoomInfo(){Name="room1"}
        };

        await hubConnection.SendAsync("JoInRoom", sendMsg);

        await hubConnection.SendAsync("SyncRoom", syndMsg);

        //OpenDrawer(Anchor.Right);
        searchResult = await Http.GetFromJsonAsync<SearchResult>($"Chat?keyword=DGROUPBEST");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        
        _context = await _canvas.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));        
        await base.OnInitializedAsync();

        Dictionary<string,ElementReference> resource = new Dictionary<string, ElementReference>();

        resource["img-char1"]= _img_char1;
        resource["img-back"]= _spritesheet;

        _chatLand = new ChatLand()
        {
            _context = _context,
            BallField = BallField,
            resource = resource,
            LastRender = LastRender              
        };

    }

    //[JSInvokable]
    //public void ResizeInBlazor(double width, double height) => BallField.Resize(width, height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {
        await _chatLand.GameLoop(timeStamp,800,600);
    }

    private int increaseDelta = 50;

    string KeyPressed = "";
    string EventInfo = "";

    private string ChatMessageText;

    private async Task KeyboardChatEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "Enter":
            if (!string.IsNullOrWhiteSpace(ChatMessageText))
            {   
                EventInfo = ChatMessageText;
                await SendChatMessage(ChatMessageText);
            }
            break;
        }
    }

    private async Task KeyboardEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "ArrowUp":
            KeyUp();
            break;
            case "ArrowDown":
            KeyDown();
            break;
            case "ArrowLeft":
            KeyLeft();
            break;
            case "ArrowRight":
            KeyRight();
            break;
            case "Enter":
            if (!string.IsNullOrWhiteSpace(ChatMessageText))
            {   
                EventInfo = ChatMessageText;
                await SendChatMessage(ChatMessageText);
            }
            break;
        }
    }

    protected async Task SendChatMessage(string chatMessage)
    {
        ChatMessage sendChat = new ChatMessage()
        {
            From = new UserInfo(){ Id=LoginId },
            Message = chatMessage
        };
        await hubConnection.SendAsync("ChatMessage", sendChat);
        ChatMessageText = string.Empty;
    }

    protected async Task KeyUp()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = -increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyDown()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyLeft()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = -increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyRight()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);        
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            LeaveRoom leaveRoom = new LeaveRoom()
            {
                UserInfo = new UserInfo(){Name=Name, Id= LoginId},
                RoomInfo = new RoomInfo(){Name=RoomName}                
            };
            await hubConnection.SendAsync("LeaveRoom", leaveRoom);

            await hubConnection.DisposeAsync();
        }
    }


    
    public string Text { get; set; }

    bool open = false;

    bool isShowaFilter = true;



}
