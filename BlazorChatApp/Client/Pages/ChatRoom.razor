@page "/metaroom"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorChatApp.Client.Core

@using BlazorChatApp.Client.Core.Assets
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatApp.Shared;
@using BlazorChatApp.Client.ChatLand;
@using Microsoft.JSInterop
@using ServiceModel.Models.Search
@using System.Drawing
@inject HttpClient Http

@implements IAsyncDisposable
@inject IJSRuntime JsRuntime


<link href="css/site.css" rel="stylesheet">

<Spritesheet @ref="_spritesheet" Source="assets/warrior2.json" OnModelLoaded="@InitGame" />

<div id="canvasContainer" style="width: 800px; height: 600px; position: absolute;">
    <img @ref="_img_back" hidden id="spritesheet" src="/img/map1.png" />
    <img @ref="_img_char1" hidden id="spritesheet" src="/img/char-1.png" />
    <BECanvas Width=800 Height=600 @ref="_canvas"></BECanvas>
</div>

<div style="width:100%; height:600px; overflow:auto">

    <table>
        <thead>
            <tr>
                <th><div id="canvasContainerEx" style="width: 800px; height: 600px;"></div></th>
                <th>
                    <div id="scrollbox" style="width: 300px;">
                        @foreach (var item in _messages)
                        {
                            @if (item.IsNotice)
                            {
                                <div class="alert alert-info">@item.Body</div>
                            }
                            else
                            {
                                <div class="@item.CSS">
                                    <div class="user">@item.Username</div>
                                    <div class="msg">@item.Body</div>
                                </div>
                            }
                        }
                        <hr />
                        <input type="text" class="input-lg" placeholder="enter your comment" @onkeydown="KeyboardEventHandler" @onkeypress="KeyboardEventHandler" @onkeyup="KeyboardChatEventHandler" @bind="ChatMessageText"></input>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan="2">
                </td>
            </tr>
        </tbody>
    </table>
</div>

@if (dataSource.Count > 0)
{
    <Carousel DataSource=@dataSource Style="width:800px;height:600px;"></Carousel>
}


@code {

    private bool opened = false;

    //Game
    Spritesheet _spritesheet;

    private string Name { get; set; }
    private string RoomName { get; set; }
    public HubConnection hubConnection { get; set; }

    BECanvasComponent _canvas;
    ElementReference _img_back;
    ElementReference _img_char1;

    private string LoginId { get; set; }

    private ChatLand _chatLand;
    //Product
    string TextValue { get; set; }

    private SearchResult searchResult;

    private List<SearchProduct> products = new List<SearchProduct>();

    private ShopItem[] shopItems;

    private bool visible = false;

    bool mandatory = true;

    private Random rng = new Random();

    private List<object> dataSource = new List<object>();

    //Chat
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private void UpdateProcutView()
    {
        dataSource.Clear();
        var suffleProduct = searchResult.list.OrderBy(a => rng.Next()).ToList();
        foreach (var item in suffleProduct.Take(10))
        {
            dataSource.Add(new
            {
                image = item.imageUrl1,
                label = item.mallName,
                content = item.nameKr
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        shopItems = await Http.GetFromJsonAsync<ShopItem[]>("ShopItem");

        searchResult = await Http.GetFromJsonAsync<SearchResult>("Chat?keyword=DGROUPBEST");

        LoginId = Guid.NewGuid().ToString();    //Fake Login ID

        //UpdateProcutView();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<RoomInfo, UserInfo, UpdateUserPos>("OnJoinRoom", (room, user, pos) =>
        {
            Console.WriteLine($"WS - OnJoinRoom");
            if (user.Id == LoginId)
            {
                Name = user.Name;
                RoomName = room.Name;
                StateHasChanged();
            }
            else
            {
                _chatLand.AddUser(user.Id, user.Name, pos.AbsPosX, pos.AbsPosY, false);
            }
        });

        hubConnection.On<UserInfo, List<UpdateUserPos>>("OnSyncRoom", (user, updateUserPos) =>
         {
             Console.WriteLine($"WS - OnSyncRoom");
             if (user.Id == LoginId)
             {
                 foreach (var pos in updateUserPos)
                 {
                     bool isMine = pos.Id == LoginId ? true : false;

                     _chatLand.AddUser(pos.Id, pos.Name, pos.AbsPosX, pos.AbsPosY, isMine);
                 }
             }
         });

        //ChatMessage
        hubConnection.On<ChatMessage>("OnChatMessage", (chatMessage) =>
        {
            bool isMine = chatMessage.From.Id == LoginId ? true : false;

            _messages.Add(new Message(chatMessage.From.Name, chatMessage.Message, isMine));

            Console.WriteLine($"WS - OnChatMessage");
            _chatLand.ChatMessage(chatMessage);

        // Inform blazor the UI needs updating
        StateHasChanged();
        });


        hubConnection.On<UpdateUserPos>("OnUpdateUserPos", (userPos) =>
        {
            Console.WriteLine($"WS - OnUpdateUserPos");
        //ME
        if (userPos.Id == LoginId)
            {
                var linkinfo = _chatLand.CollisionCheck(userPos.AbsPosX, userPos.AbsPosY);
                if (linkinfo != null)
                {
                    UpdateProcutView();
                    opened = true;
                    StateHasChanged();
                }
                else
                {
                    products.Clear();
                    dataSource.Clear();
                    opened = false;
                    StateHasChanged();
                }
            }
            _chatLand.UpdateUserPos(userPos);
        });

        hubConnection.On<LeaveRoom>("OnLeaveRoom", (room) =>
        {
            Console.WriteLine($"WS - OnLeaveRoom");
            _chatLand.RemoveUser(room.UserInfo.Id);
        });

        await hubConnection.StartAsync();

        JoinRoom sendMsg = new JoinRoom()
        {
            UserInfo = new UserInfo() { Name = "user", Id = LoginId },
            RoomInfo = new RoomInfo() { Name = "room1" }
        };

        SyncRoom syndMsg = new SyncRoom()
        {
            UserInfo = new UserInfo() { Name = "user", Id = LoginId },
            RoomInfo = new RoomInfo() { Name = "room1" }
        };

        await hubConnection.SendAsync("JoInRoom", sendMsg);

        await hubConnection.SendAsync("SyncRoom", syndMsg);

        //OpenDrawer(Anchor.Right);
        searchResult = await Http.GetFromJsonAsync<SearchResult>($"Chat?keyword=DGROUPBEST");

    }

    public async Task InitGame(AnimationCollection animationCollection)
    {
        //_context = await _canvas.CreateCanvas2DAsync();

        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));

        Dictionary<string, ElementReference> resource = new Dictionary<string, ElementReference>();

        resource["img-char1"] = _img_char1;
        resource["img-back"] = _img_back;

        _chatLand = await ChatLand.Create(_canvas, resource, animationCollection);

        // this will make sure that the viewport is correctly initialized
        await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));

    }

    [JSInvokable]
    public void OnResize(int screenWidth, int screenHeight)
    {
        if (null == _chatLand)
            return;

        _chatLand.Display.Size = new Size(800, 600);
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        if (null == _chatLand)
            return;

        await _chatLand.Step();
    }

    [JSInvokable]
    public async ValueTask OnMouseMove(int mouseX, int mouseY)
    {
        InputSystem.Instance.MouseCoords.X = mouseX;
        InputSystem.Instance.MouseCoords.Y = mouseY;
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(MouseButtons button) =>
        InputSystem.Instance.SetButtonState(button, ButtonState.States.Down);

    [JSInvokable]
    public async ValueTask OnMouseUp(MouseButtons button) =>
        InputSystem.Instance.SetButtonState(button, ButtonState.States.Up);

    [JSInvokable]
    public async ValueTask OnKeyDown(int keyCode)
    {
        //InputSystem.Instance.SetKeyState((Keys)keyCode,ButtonState.States.Down);

        if ((Keys)keyCode == Keys.Left)
        {
            await KeyLeft();
        }

        if ((Keys)keyCode == Keys.Right)
        {
            await KeyRight();
        }

        if ((Keys)keyCode == Keys.Up)
        {
            await KeyUp();
        }

        if ((Keys)keyCode == Keys.Down)
        {
            await KeyDown();
        }
    }

    [JSInvokable]
    public async ValueTask OnKeyUp(int keyCode)
    {
        //InputSystem.Instance.SetKeyState((Keys)keyCode,ButtonState.States.Up);
    }


    private int increaseDelta = 50;

    string KeyPressed = "";
    string EventInfo = "";

    private string ChatMessageText;

    private async Task KeyboardChatEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "Enter":
            if (!string.IsNullOrWhiteSpace(ChatMessageText))
            {
                EventInfo = ChatMessageText;
                await SendChatMessage(ChatMessageText);

                await Task.Delay(1); //Magic!
                ChatMessageText = "";
                StateHasChanged();
            }
            break;
        }
    }

    private async Task KeyboardEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "ArrowUp":
            await KeyUp();
            break;
            case "ArrowDown":
            await KeyDown();
            break;
            case "ArrowLeft":
            await KeyLeft();
            break;
            case "ArrowRight":
            await KeyRight();
            break;
        }
    }

    protected async Task SendChatMessage(string chatMessage)
    {
        ChatMessage sendChat = new ChatMessage()
        {
            From = new UserInfo()
            {
                Id = LoginId,
                Name = Name
            },
            Message = chatMessage
        };
        await hubConnection.SendAsync("ChatMessage", sendChat);
        ChatMessageText = string.Empty;

        StateHasChanged();

    }

    protected async Task KeyUp()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = -increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyDown()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyLeft()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = -increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyRight()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            LeaveRoom leaveRoom = new LeaveRoom()
            {
                UserInfo = new UserInfo() { Name = Name, Id = LoginId },
                RoomInfo = new RoomInfo() { Name = RoomName }
            };
            await hubConnection.SendAsync("LeaveRoom", leaveRoom);

            await hubConnection.DisposeAsync();
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }

}
