@page "/chatroom"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorChatApp.Client.Core

@using BlazorChatApp.Client.Core.Assets
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatApp.Shared;
@using BlazorChatApp.Client.ChatLand;
@using Microsoft.JSInterop
@using ServiceModel.Models.Search
@using System.Drawing
@inject HttpClient Http


@implements IAsyncDisposable
@inject IJSRuntime JsRuntime;

<Spritesheet @ref="_spritesheet" Source = "assets/warrior.json" OnModelLoaded="@InitGame" />

<p>MyName: @Name , RoomName : @RoomName , 채팅창에 방향키누르면 움직입니다. </p>

<input type="text" @onkeydown="KeyboardEventHandler" @onkeypress="KeyboardEventHandler" @onkeyup="KeyboardChatEventHandler"  @bind="ChatMessageText" />
<h6>@KeyPressed </h6>
<h6>@EventInfo</h6>



<div id="canvasContainer" style="position: fixed; width: 100%; height: 100%" >
    <img @ref="_img_back" hidden id="spritesheet" src="/img/map1.png" />
    <img @ref="_img_char1" hidden id="spritesheet" src="/img/char-1.png" />
    <BECanvas Width=1024 Height=800  @ref="_canvas"></BECanvas>
</div>

@code {
    //Game
    Spritesheet _spritesheet;

    private string Name{ get; set; }
    private string RoomName{ get; set; }
    public HubConnection hubConnection { get; set; }
    
    BECanvasComponent _canvas;
    ElementReference _img_back;
    ElementReference _img_char1;    
    
    private string LoginId { get; set; }    

    private ChatLand _chatLand;
    //Product
    string TextValue { get; set; }    
    private SearchResult searchResult;

    bool mandatory = true;
    
    DateTime lastPopupTime = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {

        LoginId = Guid.NewGuid().ToString();    //Fake Login ID

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<RoomInfo, UserInfo, UpdateUserPos>("OnJoinRoom", (room, user, pos) =>
        {
            Console.WriteLine($"WS - OnJoinRoom");
            if(user.Id == LoginId)
            {
                Name = user.Name;
                RoomName = room.Name;                
                StateHasChanged();
            }
            else
            {
                _chatLand.AddUser(user.Id,user.Name, pos.AbsPosX, pos.AbsPosY, false);
            }
        });

        hubConnection.On<UserInfo,List<UpdateUserPos>>("OnSyncRoom", (user, updateUserPos) =>
        {
            Console.WriteLine($"WS - OnSyncRoom");
            if(user.Id == LoginId)
            {
                foreach(var pos in updateUserPos)
                {
                    bool isMe = pos.Id == LoginId ? true : false;

                    _chatLand.AddUser(pos.Id, pos.Name, pos.AbsPosX, pos.AbsPosY, isMe);                        
                }
            }
        });

        //ChatMessage
        hubConnection.On<ChatMessage>("OnChatMessage", (chatMessage) =>
        {
            Console.WriteLine($"WS - OnChatMessage");
            _chatLand.ChatMessage(chatMessage);
        });


        hubConnection.On<UpdateUserPos>("OnUpdateUserPos", (userPos) =>
        {
            Console.WriteLine($"WS - OnUpdateUserPos");
            //ME
            if(userPos.Id == LoginId)
            {
                var linkinfo = _chatLand.CollisionCheck(userPos.AbsPosX, userPos.AbsPosY);
                if (linkinfo != null)
                {
                    TimeSpan offset = DateTime.Now - lastPopupTime;
                    if(offset.TotalSeconds > 5)
                    {                        
                        //OpenDrawer(Anchor.Right);
                        lastPopupTime = DateTime.Now;
                        StateHasChanged();
                    }
                }
                else
                {
                    
                }
            }
            _chatLand.UpdateUserPos(userPos);
        });

        hubConnection.On<LeaveRoom>("OnLeaveRoom", (room) =>
        {
            Console.WriteLine($"WS - OnLeaveRoom");
            _chatLand.RemoveUser(room.UserInfo.Id);
        });

        await hubConnection.StartAsync();

        JoinRoom sendMsg = new JoinRoom()
        {
            UserInfo = new UserInfo(){Name="user", Id= LoginId},
            RoomInfo = new RoomInfo(){Name="room1"}
        };

        SyncRoom syndMsg = new SyncRoom()
        {
            UserInfo = new UserInfo(){Name="user", Id= LoginId},
            RoomInfo = new RoomInfo(){Name="room1"}
        };

        await hubConnection.SendAsync("JoInRoom", sendMsg);

        await hubConnection.SendAsync("SyncRoom", syndMsg);

        //OpenDrawer(Anchor.Right);
        searchResult = await Http.GetFromJsonAsync<SearchResult>($"Chat?keyword=DGROUPBEST");

    }

    public async Task InitGame(AnimationCollection animationCollection)
    {
        //_context = await _canvas.CreateCanvas2DAsync();

        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));        

        Dictionary<string,ElementReference> resource = new Dictionary<string, ElementReference>();

        resource["img-char1"]= _img_char1;
        resource["img-back"]= _img_back;

        _chatLand =  await ChatLand.Create(_canvas, resource, animationCollection);

        // this will make sure that the viewport is correctly initialized
        await JsRuntime.InvokeAsync<object>("gameWindowResize", DotNetObjectReference.Create(this));  
        
    }

    [JSInvokable]
    public void OnResize(int screenWidth, int screenHeight)
    {
        if (null == _chatLand) return;

        _chatLand.Display.Size = new Size(screenWidth, screenHeight);
    }

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp)
    {
        if (null == _chatLand) return;

        await _chatLand.Step();
    }

    [JSInvokable]
    public async ValueTask OnMouseMove(int mouseX, int mouseY)
    {
        InputSystem.Instance.MouseCoords.X = mouseX;
        InputSystem.Instance.MouseCoords.Y = mouseY;
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(MouseButtons button) =>
        InputSystem.Instance.SetButtonState(button, ButtonState.States.Down);

    [JSInvokable]
    public async ValueTask OnMouseUp(MouseButtons button) =>
        InputSystem.Instance.SetButtonState(button, ButtonState.States.Up);

    [JSInvokable]
    public async ValueTask OnKeyDown(int keyCode)
    {
        InputSystem.Instance.SetKeyState((Keys)keyCode,ButtonState.States.Down);
        if((Keys)keyCode == Keys.Left)
        {
            KeyLeft();
        }

        if((Keys)keyCode == Keys.Right)
        {
            KeyRight();
        }

        if((Keys)keyCode == Keys.Up)
        {
            KeyUp();
        }

        if((Keys)keyCode == Keys.Down)
        {
            KeyDown();
        }
    } 
            
    [JSInvokable]
    public async ValueTask OnKeyUp(int keyCode) =>
        InputSystem.Instance.SetKeyState((Keys)keyCode,ButtonState.States.Up);

    private int increaseDelta = 50;

    string KeyPressed = "";
    string EventInfo = "";

    private string ChatMessageText;

    private async Task KeyboardChatEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "Enter":
            if (!string.IsNullOrWhiteSpace(ChatMessageText))
            {   
                EventInfo = ChatMessageText;
                await SendChatMessage(ChatMessageText);
            }
            break;
        }
    }

    private async Task KeyboardEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "ArrowUp":
            await KeyUp();
            break;
            case "ArrowDown":
            await KeyDown();
            break;
            case "ArrowLeft":
            await KeyLeft();
            break;
            case "ArrowRight":
            await KeyRight();
            break;
            case "Enter":
            if (!string.IsNullOrWhiteSpace(ChatMessageText))
            {   
                EventInfo = ChatMessageText;
                await SendChatMessage(ChatMessageText);
            }
            break;
        }
    }

    protected async Task SendChatMessage(string chatMessage)
    {
        ChatMessage sendChat = new ChatMessage()
        {
            From = new UserInfo(){ Id=LoginId },
            Message = chatMessage
        };
        await hubConnection.SendAsync("ChatMessage", sendChat);
        ChatMessageText = string.Empty;
    }

    protected async Task KeyUp()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = -increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyDown()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyLeft()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = -increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyRight()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);        
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            LeaveRoom leaveRoom = new LeaveRoom()
            {
                UserInfo = new UserInfo(){Name=Name, Id= LoginId},
                RoomInfo = new RoomInfo(){Name=RoomName}                
            };
            await hubConnection.SendAsync("LeaveRoom", leaveRoom);

            await hubConnection.DisposeAsync();
        }
    }

}
