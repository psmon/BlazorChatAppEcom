@page "/chatroom"
@using System.Drawing
@using Blazor.Extensions; 
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using BlazorChatApp.Client.Core
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatApp.Shared;
@using BlazorChatApp.Client.Model;
@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime;

<p>MyName: @Name , RoomName : @RoomName , 채팅창에 방향키누르면 움직입니다. </p>

<input type="text" @onkeydown="KeyboardEventHandler" @onkeypress="KeyboardEventHandler" @onkeyup="KeyboardChatEventHandler"  @bind="ChatMessageText" />
<h6>@KeyPressed </h6>
<h6>@EventInfo</h6>


<div id="canvasContainer" style="position: fixed; width: 100%; height: 100%" >
    <img @ref="_spritesheet" hidden id="spritesheet" src="/img/map1.png" />
    <BECanvas Width=1024 Height=800  @ref="_canvas"></BECanvas>
</div>

@code {
    private string Name{ get; set; }

    private string RoomName{ get; set; }

    public HubConnection hubConnection { get; set; }

    private Field BallField = new Field();

    BECanvasComponent _canvas;
    ElementReference _spritesheet;

    Canvas2DContext _context;

    private string LoginId { get; set; }

    private DateTime LastRender;

    protected override async Task OnInitializedAsync()
    {

        LoginId = Guid.NewGuid().ToString();    //Fake Login ID

        hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<RoomInfo, UserInfo, UpdateUserPos>("OnJoinRoom", (room, user, pos) =>
        {
            Console.WriteLine($"WS - OnJoinRoom");
            if(user.Id == LoginId)
            {
                Name = user.Name;
                RoomName = room.Name;                
                StateHasChanged();
            }
            else
            {
                BallField.AddUser(user.Id,user.Name, pos.AbsPosX, pos.AbsPosY);
            }
        });

        hubConnection.On<UserInfo,List<UpdateUserPos>>("OnSyncRoom", (user, updateUserPos) =>
        {
            Console.WriteLine($"WS - OnSyncRoom");
            if(user.Id == LoginId)
            {
                foreach(var pos in updateUserPos)
                {
                    BallField.AddUser(pos.Id, pos.Name, pos.AbsPosX, pos.AbsPosY);                        
                }
            }
        });

        //ChatMessage
        hubConnection.On<ChatMessage>("OnChatMessage", (chatMessage) =>
        {
            Console.WriteLine($"WS - OnChatMessage");
            BallField.ChatMessage(chatMessage);
        });

        hubConnection.On<UpdateUserPos>("OnUpdateUserPos", (userPos) =>
        {
            Console.WriteLine($"WS - OnUpdateUserPos");

            //ME
            if(userPos.Id == LoginId)
            {
                var linkinfo = BallField.CollisionCheck(userPos.AbsPosX, userPos.AbsPosY);
                if (linkinfo != null)
                {                    
                    //_jsRuntime.InvokeVoidAsync("window.open", linkinfo.Link).GetAwaiter().GetResult();
                }
            }
            BallField.UpdateUserPos(userPos);
        });

        hubConnection.On<LeaveRoom>("OnLeaveRoom", (room) =>
        {
            Console.WriteLine($"WS - OnLeaveRoom");
            BallField.RemoveUser(room.UserInfo.Id);
        });

        await hubConnection.StartAsync();

        JoinRoom sendMsg = new JoinRoom()
        {
            UserInfo = new UserInfo(){Name="user", Id= LoginId},
            RoomInfo = new RoomInfo(){Name="room1"}
        };

        SyncRoom syndMsg = new SyncRoom()
        {
            UserInfo = new UserInfo(){Name="user", Id= LoginId},
            RoomInfo = new RoomInfo(){Name="room1"}
        };

        await hubConnection.SendAsync("JoInRoom", sendMsg);

        await hubConnection.SendAsync("SyncRoom", syndMsg);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        
        await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));
        _context = await _canvas.CreateCanvas2DAsync(); 
    }

    //[JSInvokable]
    //public void ResizeInBlazor(double width, double height) => BallField.Resize(width, height);

    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int width, int height)
    {
        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        BallField.StepForward();

        await _context.BeginBatchAsync();
        await _context.ClearRectAsync(0, 0, BallField.Width, BallField.Height);
        await _context.SetFillStyleAsync("#003366");
        await _context.FillRectAsync(0, 0, BallField.Width, BallField.Height);
        await _context.DrawImageAsync(_spritesheet, 0, 0,BallField.Width,BallField.Height);

        await _context.SetFontAsync("26px Segoe UI");
        await _context.SetFillStyleAsync("#FFFFFF");


        await _context.FillTextAsync("Blazor WebAssembly + HTML Canvas", 10, 30);
        await _context.SetFontAsync("16px consolas");
        await _context.FillTextAsync($"FPS: {fps:0.000}", 10, 50);
        await _context.SetStrokeStyleAsync("#FFFFFF");

        await _context.SetFontAsync("12px 바탕체");
        await _context.SetStrokeStyleAsync("#DF0101");

        foreach(var store in BallField.storeLinks)
        {
            await _context.FillTextAsync($"{store.Name}-{store.PosX},{store.PosY}", store.PosX, store.PosY);
        }

        await _context.SetStrokeStyleAsync("#FFFFFF");
        foreach (var ball in BallField.Balls)
        {
            if (!string.IsNullOrEmpty(ball.ChatMessage))
            {
                await _context.FillTextAsync($"{ball.Name} - {ball.ChatMessage}", ball.X -10, ball.Y -20);
            }
            else
            {
                await _context.FillTextAsync($"{ball.Name} - {(int)ball.X},{(int)ball.Y}", ball.X -10, ball.Y -20);
            }

            await _context.BeginPathAsync();
            await _context.ArcAsync(ball.X, ball.Y, ball.Radius, 0, 2 * Math.PI, false);
            await _context.SetFillStyleAsync(ball.Color);
            await _context.FillAsync();
            await _context.StrokeAsync();
        }
        await _context.EndBatchAsync();
    }

    private int increaseDelta = 50;

    string KeyPressed = "";
    string EventInfo = "";

    private string ChatMessageText;

    private async Task KeyboardChatEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "Enter":
            if (!string.IsNullOrWhiteSpace(ChatMessageText))
            {   
                EventInfo = ChatMessageText;
                await SendChatMessage(ChatMessageText);
            }
            break;
        }
    }

    [JSInvokable]
    public async ValueTask OnMouseMove(int mouseX, int mouseY)
    {
        InputSystem.Instance.MouseCoords.X = mouseX;
        InputSystem.Instance.MouseCoords.Y = mouseY;
    }

    [JSInvokable]
    public async ValueTask OnMouseDown(MouseButtons button)
    {
        InputSystem.Instance.SetButtonState(button, ButtonStates.Down);
    }

    [JSInvokable]
    public async ValueTask OnMouseUp(MouseButtons button)
    {
        InputSystem.Instance.SetButtonState(button, ButtonStates.Up);
    }

    private async Task KeyboardEventHandler(KeyboardEventArgs args)
    {
        KeyPressed = "Key Pressed is " + args.Key;
        //EventInfo = "Event Type " + args.Type;

        switch (args.Key)
        {
            case "ArrowUp":
            KeyUp();
            break;
            case "ArrowDown":
            KeyDown();
            break;
            case "ArrowLeft":
            KeyLeft();
            break;
            case "ArrowRight":
            KeyRight();
            break;
            case "Enter":
            if (!string.IsNullOrWhiteSpace(ChatMessageText))
            {   
                EventInfo = ChatMessageText;
                await SendChatMessage(ChatMessageText);
            }
            break;
        }
    }

    protected async Task SendChatMessage(string chatMessage)
    {
        ChatMessage sendChat = new ChatMessage()
        {
            From = new UserInfo(){ Id=LoginId },
            Message = chatMessage
        };
        await hubConnection.SendAsync("ChatMessage", sendChat);
        ChatMessageText = string.Empty;
    }

    protected async Task KeyUp()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = -increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyDown()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = increaseDelta,
            PosX = 0
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyLeft()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = -increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);
    }
    protected async Task KeyRight()
    {
        UpdateUserPos updatePos = new UpdateUserPos()
        {
            Id = LoginId,
            PosY = 0,
            PosX = increaseDelta
        };
        await hubConnection.SendAsync("UpdateUserPos", updatePos);        
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            LeaveRoom leaveRoom = new LeaveRoom()
            {
                UserInfo = new UserInfo(){Name=Name, Id= LoginId},
                RoomInfo = new RoomInfo(){Name=RoomName}                
            };
            await hubConnection.SendAsync("LeaveRoom", leaveRoom);

            await hubConnection.DisposeAsync();
        }
    }

}
